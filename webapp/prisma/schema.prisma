generator client {
    provider = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Mail {
    id              String  @id @default(cuid())
    email           String  @unique
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    coins         Int       @default(5)
    
    accounts      Account[]
    sessions      Session[]
    upvotes       Upvote[]
    downvotes   Downvote[]
    submitedTips    TipSubmission[]
    interesetd      Interested?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}


model Tip {
    id          String  @id @default(uuid())
    text        String
    itemId      String
    
    item        Item    @relation(fields: [itemId], references: [id], onDelete: Cascade)
    upvotes     Upvote[]
    downvotes   Downvote[]
}

model Item {
    id          String  @id @default(uuid())
    name        String
    description String?
    created_at  DateTime    @default(now())
    updated_at  DateTime    @updatedAt

    tips        Tip[]
    submitedTips    TipSubmission[]
}

model Upvote {
    tipId           String
    userId          String

    tip             Tip     @relation(fields: [tipId], references: [id], onDelete: Cascade)
    user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([tipId, userId])
}

model Downvote {
    tipId           String
    userId          String

    tip             Tip     @relation(fields: [tipId], references: [id], onDelete: Cascade)
    user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([tipId, userId])
}

model TipSubmission {
    id              String @id @default(uuid())
    text            String
    userId          String
    itemId          String

    user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    item            Item    @relation(fields: [itemId], references: [id], onDelete: Cascade)
}

model Interested {
    id              String @id  @default(uuid())
    userId          String  @unique

    user            User @relation(fields: [userId], references: [id])
}